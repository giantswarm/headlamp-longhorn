(function(e,i){typeof exports=="object"&&typeof module<"u"?i(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@kinvolk/headlamp-plugin/lib/K8s/crd","react-router-dom"],i):(e=typeof globalThis<"u"?globalThis:e||self,i(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.Crd,e.pluginLib.ReactRouter))})(this,function(e,i,n,m,h){"use strict";const{makeKubeObject:G}=i.K8s.cluster,v="longhorn.io",S="v1beta2",I=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Volume",pluralName:"volumes"}),E=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Node",pluralName:"nodes"}),A=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Setting",pluralName:"settings"}),T=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Backup",pluralName:"backups"}),V=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"EngineImage",pluralName:"engineimages"});function j(){var c,g;const{namespace:r,name:s}=h.useParams(),[a,o]=I.useGet(s,r);if(o)return e.jsxs("div",{children:["Error loading volume: ",o.message]});if(!a)return e.jsx("div",{children:"Loading..."});const{spec:l={},status:t={},metadata:p={}}=a.jsonData||{},{kubernetesStatus:u={}}=t;return e.jsxs(e.Fragment,{children:[e.jsx(n.MainInfoSection,{resource:a,title:`Volume: ${p.name}`,extraInfo:[{name:"State",value:t.state||"-"},{name:"Robustness",value:t.robustness||"-"},{name:"Node",value:t.currentNodeID?e.jsx(n.Link,{routeName:"node",params:{name:t.currentNodeID},children:t.currentNodeID}):"-"},{name:"Size",value:l.size||"-"}]}),e.jsx(n.SectionBox,{title:"Status Details",children:e.jsx(n.NameValueTable,{rows:[{name:"Actual Size",value:t.actualSize||"-"},{name:"Frontend Disabled",value:String(t.frontendDisabled)},{name:"Is Standby",value:String(t.isStandby)},{name:"Share Endpoint",value:t.shareEndpoint||"-"},{name:"Share State",value:t.shareState||"-"},{name:"Last Backup",value:t.lastBackup||"-"},{name:"Last Backup At",value:t.lastBackupAt||"-"},{name:"Expansion Required",value:String(t.expansionRequired)},{name:"Restore Required",value:String(t.restoreRequired)},{name:"Restore Initiated",value:String(t.restoreInitiated)}]})}),e.jsx(n.SectionBox,{title:"Configuration",children:e.jsx(n.NameValueTable,{rows:[{name:"Data Engine",value:l.dataEngine||"-"},{name:"Frontend",value:l.frontend||"-"},{name:"Number of Replicas",value:l.numberOfReplicas||"-"},{name:"Data Locality",value:l.dataLocality||"-"},{name:"Access Mode",value:l.accessMode||"-"},{name:"Backing Image",value:l.backingImage||"-"},{name:"Stale Replica Timeout",value:l.staleReplicaTimeout||"-"},{name:"Encrypted",value:String(l.encrypted)},{name:"Engine Image",value:l.image||"-"},{name:"From Backup",value:l.fromBackup||"-"},{name:"Disk Selector",value:((c=l.diskSelector)==null?void 0:c.join(", "))||"-"},{name:"Node Selector",value:((g=l.nodeSelector)==null?void 0:g.join(", "))||"-"},{name:"Disable Revision Counter",value:String(l.revisionCounterDisabled)},{name:"Replica Auto Balance",value:l.replicaAutoBalance||"-"},{name:"Unmap Mark SnapChain Removed",value:l.unmapMarkSnapChainRemoved||"-"},{name:"Snapshot Data Integrity",value:l.snapshotDataIntegrity||"-"},{name:"Freeze Filesystem For Snapshot",value:l.freezeFilesystemForSnapshot||"-"},{name:"Backup Target",value:l.backupTargetName||"-"},{name:"Backup Compression Method",value:l.backupCompressionMethod||"-"}]})}),e.jsx(n.SectionBox,{title:"Kubernetes Status",children:e.jsx(n.NameValueTable,{rows:[{name:"Namespace",value:u.namespace||"-"},{name:"PVC Name",value:u.pvcName||"-"},{name:"PV Name",value:u.pvName||"-"},{name:"PV Status",value:u.pvStatus||"-"},{name:"Last PVCRef At",value:u.lastPVCRefAt||"-"},{name:"Last PodRef At",value:u.lastPodRefAt||"-"}]})}),e.jsx(n.SectionBox,{title:"Conditions",children:e.jsx(n.ConditionsTable,{resource:a.jsonData})})]})}function y(){var O,B;const{namespace:r,name:s}=h.useParams(),[a,o]=E.useGet(s,r);if(o)return e.jsxs("div",{children:["Error loading node: ",o.message]});if(!a)return e.jsx("div",{children:"Loading..."});const{spec:l={},status:t={},metadata:p={}}=a.jsonData||{},u=t.conditions||[],c=u.find(L=>L.type==="Ready"),g=u.find(L=>L.type==="Schedulable");return e.jsxs(e.Fragment,{children:[e.jsx(n.MainInfoSection,{resource:a,title:`Node: ${p.name}`,extraInfo:[{name:"Ready",value:e.jsx(n.StatusLabel,{status:(c==null?void 0:c.status)==="True"?"success":"error",children:(c==null?void 0:c.status)||"Unknown"})},{name:"Schedulable",value:e.jsx(n.StatusLabel,{status:(g==null?void 0:g.status)==="True"?"success":"error",children:(g==null?void 0:g.status)||"Unknown"})},{name:"Allow Scheduling",value:String(l.allowScheduling??"-")},{name:"Region",value:t.region||"-"},{name:"Zone",value:t.zone||"-"}]}),e.jsx(n.SectionBox,{title:"Configuration",children:e.jsx(n.NameValueTable,{rows:[{name:"Tags",value:((O=l.tags)==null?void 0:O.join(", "))||"-"},{name:"Instance Manager CPU Request",value:l.instanceManagerCPURequest||"-"},{name:"Disks",value:Object.keys(l.disks||{}).join(", ")||"-"}]})}),e.jsx(n.SectionBox,{title:"Status Details",children:e.jsx(n.NameValueTable,{rows:[{name:"Auto Evicting",value:String(t.autoEvicting)},{name:"Last Periodic Snapshot Check",value:((B=t.snapshotCheckStatus)==null?void 0:B.lastPeriodicCheckedAt)||"-"},{name:"Disk Status",value:Object.keys(t.diskStatus||{}).join(", ")||"-"}]})}),e.jsx(n.SectionBox,{title:"Conditions",children:e.jsx(n.ConditionsTable,{resource:a.jsonData})})]})}function _(){const{namespace:r,name:s}=h.useParams(),[a,o]=T.useGet(s,r);if(o)return e.jsxs("div",{children:["Error loading backup: ",o.message]});if(!a)return e.jsx("div",{children:"Loading..."});const{spec:l={},status:t={},metadata:p={}}=a.jsonData||{};return e.jsxs(e.Fragment,{children:[e.jsx(n.MainInfoSection,{resource:a,title:`Backup: ${p.name}`,extraInfo:[{name:"State",value:t.state||"-"},{name:"Snapshot Name",value:t.snapshotName||"-"},{name:"Backup Target",value:t.backupTargetName||"-"},{name:"Volume Name",value:t.volumeName||"-"}]}),e.jsx(n.SectionBox,{title:"Details",children:e.jsx(n.NameValueTable,{rows:[{name:"Size",value:t.size||"-"},{name:"Newly Uploaded Data",value:t.newlyUploadDataSize||"-"},{name:"Re-Uploaded Data",value:t.reUploadedDataSize||"-"},{name:"Snapshot Created At",value:t.snapshotCreatedAt||"-"},{name:"Backup Created At",value:t.backupCreatedAt||"-"},{name:"Last Synced At",value:t.lastSyncedAt||"-"},{name:"Compression Method",value:t.compressionMethod||"-"},{name:"Volume Size",value:t.volumeSize||"-"},{name:"Volume Created At",value:t.volumeCreated||"-"},{name:"Volume Backing Image",value:t.volumeBackingImageName||"-"},{name:"Progress",value:`${t.progress||0}%`},{name:"Replica Address",value:t.replicaAddress||"-"}]})}),l.labels&&e.jsx(n.SectionBox,{title:"Spec Labels",children:e.jsx(n.NameValueTable,{rows:Object.entries(l.labels).map(([u,c])=>({name:u,value:c}))})}),t.labels&&e.jsx(n.SectionBox,{title:"Status Labels",children:e.jsx(n.NameValueTable,{rows:Object.entries(t.labels).map(([u,c])=>({name:u,value:c}))})}),t.error&&e.jsx(n.SectionBox,{title:"Error",children:e.jsx("pre",{children:t.error})}),t.messages&&e.jsx(n.SectionBox,{title:"Messages",children:e.jsx(n.NameValueTable,{rows:Object.entries(t.messages).map(([u,c])=>({name:u,value:c}))})})]})}function w(){const{namespace:r,name:s}=h.useParams(),[a,o]=V.useGet(s,r);if(o)return e.jsxs("div",{children:["Error loading engine image: ",o.message]});if(!a)return e.jsx("div",{children:"Loading..."});const{spec:l={},status:t={},metadata:p={}}=a.jsonData||{};return e.jsxs(e.Fragment,{children:[e.jsx(n.MainInfoSection,{resource:a,title:`Engine Image: ${p.name}`,extraInfo:[{name:"State",value:t.state||"-"},{name:"Image",value:l.image||"-"},{name:"Ref Count",value:t.refCount??"-"},{name:"Build Date",value:t.buildDate||"-"},{name:"Incompatible",value:String(t.incompatible)}]}),e.jsx(n.SectionBox,{title:"Details",children:e.jsx(n.NameValueTable,{rows:[{name:"Version",value:t.version||"-"},{name:"Git Commit",value:t.gitCommit||"-"},{name:"CLI API Version",value:`${t.cliAPIMinVersion||"?"} - ${t.cliAPIVersion||"?"}`},{name:"Controller API Version",value:`${t.controllerAPIMinVersion||"?"} - ${t.controllerAPIVersion||"?"}`},{name:"Data Format Version",value:`${t.dataFormatMinVersion||"?"} - ${t.dataFormatVersion||"?"}`},{name:"No Ref Since",value:t.noRefSince||"-"}]})}),t.nodeDeploymentMap&&e.jsx(n.SectionBox,{title:"Node Deployment Status",children:e.jsx(n.NameValueTable,{rows:Object.entries(t.nodeDeploymentMap).map(([u,c])=>({name:u,value:String(c)}))})}),e.jsx(n.SectionBox,{title:"Conditions",children:e.jsx(n.ConditionsTable,{resource:a.jsonData})})]})}const d="longhorn",b="volumes",x="volume",N="nodes",P="node",f="settings",k="backups",M="backup",D="engineimages",U="engineimage";i.registerSidebarEntry({parent:null,name:d,label:"Longhorn",icon:"mdi:cow"}),i.registerSidebarEntry({parent:d,name:b,label:"Volumes",url:"/longhorn/volumes"}),i.registerSidebarEntry({parent:d,name:N,label:"Nodes",url:"/longhorn/nodes"}),i.registerSidebarEntry({parent:d,name:f,label:"Settings",url:"/longhorn/settings"}),i.registerSidebarEntry({parent:d,name:k,label:"Backups",url:"/longhorn/backups"}),i.registerSidebarEntry({parent:d,name:D,label:"Engine Images",url:"/longhorn/engineimages"}),i.registerRoute({path:"/longhorn/volumes",sidebar:b,name:b,exact:!0,component:()=>e.jsx(n.ResourceListView,{title:"Longhorn Volumes",resourceClass:I,columns:["name",{id:"state",label:"State",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.state)||"-"},sort:!0},{id:"robustness",label:"Robustness",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.robustness)||"-"},sort:!0},{id:"size",label:"Size",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.spec)==null?void 0:a.size)||"-"},sort:!0},{id:"node",label:"Node",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.currentNodeID)||"-"},sort:!0},"namespace","age"]})}),i.registerRoute({path:"/longhorn/volumes/:namespace/:name",sidebar:b,parent:d,name:x,exact:!0,component:j}),i.registerRoute({path:"/longhorn/nodes",sidebar:N,name:N,exact:!0,component:()=>e.jsx(n.ResourceListView,{title:"Longhorn Nodes",resourceClass:E,columns:["name",{id:"ready",label:"Ready",getter:r=>{var s,a,o,l;return((l=(o=(a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.conditions)==null?void 0:o.find(t=>t.type==="Ready"))==null?void 0:l.status)||"-"},sort:!0},{id:"allowScheduling",label:"Allow Scheduling",getter:r=>{var s,a;return(((a=(s=r.jsonData)==null?void 0:s.spec)==null?void 0:a.allowScheduling)??"-").toString()},sort:!0},{id:"schedulable",label:"Schedulable",getter:r=>{var s,a,o,l;return((l=(o=(a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.conditions)==null?void 0:o.find(t=>t.type==="Schedulable"))==null?void 0:l.status)||"-"},sort:!0},"age"]})}),i.registerRoute({path:"/longhorn/nodes/:namespace/:name",sidebar:N,parent:d,name:P,exact:!0,component:y}),i.registerRoute({path:"/longhorn/settings",sidebar:f,name:f,exact:!0,component:()=>e.jsx(n.ResourceListView,{title:"Longhorn Settings",resourceClass:A,columns:["name",{id:"value",label:"Value",getter:r=>{var s;return(s=r.jsonData)==null?void 0:s.value},sort:!1},{id:"applied",label:"Applied",getter:r=>{var s,a;return(((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.applied)??!1).toString()},sort:!0},"age"]})}),i.registerRoute({path:"/longhorn/backups",sidebar:k,name:k,exact:!0,component:()=>e.jsx(n.ResourceListView,{title:"Longhorn Backups",resourceClass:T,columns:["name",{id:"snapshotName",label:"Snapshot Name",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.snapshotName)||"-"},sort:!0},{id:"snapshotSize",label:"Snapshot Size",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.size)||"-"},sort:!0},{id:"backupTarget",label:"Backup Target",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.backupTargetName)||"-"},sort:!0},{id:"state",label:"State",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.state)||"-"},sort:!0},"namespace","age"]})}),i.registerRoute({path:"/longhorn/backups/:namespace/:name",sidebar:k,parent:d,name:M,exact:!0,component:_}),i.registerRoute({path:"/longhorn/engineimages",sidebar:D,name:D,exact:!0,component:()=>e.jsx(n.ResourceListView,{title:"Longhorn Engine Images",resourceClass:V,columns:["name",{id:"state",label:"State",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.state)||"-"},sort:!0},{id:"image",label:"Image",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.spec)==null?void 0:a.image)||"-"},sort:!0},{id:"refCount",label:"Ref Count",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.refCount)??"-"},sort:!0},{id:"buildDate",label:"Build Date",getter:r=>{var s,a;return((a=(s=r.jsonData)==null?void 0:s.status)==null?void 0:a.buildDate)||"-"},sort:!0},"age"]})}),i.registerRoute({path:"/longhorn/engineimages/:namespace/:name",sidebar:D,parent:d,name:U,exact:!0,component:w}),console.log("Longhorn Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
