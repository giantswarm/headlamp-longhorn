(function(a,d){typeof exports=="object"&&typeof module<"u"?d(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("react-router-dom"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material","@kinvolk/headlamp-plugin/lib/K8s/crd","react-router-dom","react"],d):(a=typeof globalThis<"u"?globalThis:a||self,d(a.pluginLib.ReactJSX,a.pluginLib,a.pluginLib.CommonComponents,a.pluginLib.MuiMaterial,a.pluginLib.Crd,a.pluginLib.ReactRouter,a.pluginLib.React))})(this,function(a,d,i,m,b,N,O){"use strict";const T=(s=>s&&typeof s=="object"&&"default"in s?s:{default:s})(O),{makeKubeObject:Q}=d.K8s.cluster,S="longhorn.io",f="v1beta2",I=b.makeCustomResourceClass({apiInfo:[{group:S,version:f}],isNamespaced:!0,singularName:"Volume",pluralName:"volumes"}),w=b.makeCustomResourceClass({apiInfo:[{group:S,version:f}],isNamespaced:!0,singularName:"Node",pluralName:"nodes"}),j=b.makeCustomResourceClass({apiInfo:[{group:S,version:f}],isNamespaced:!0,singularName:"Setting",pluralName:"settings"}),E=b.makeCustomResourceClass({apiInfo:[{group:S,version:f}],isNamespaced:!0,singularName:"Backup",pluralName:"backups"}),x=b.makeCustomResourceClass({apiInfo:[{group:S,version:f}],isNamespaced:!0,singularName:"EngineImage",pluralName:"engineimages"});function V(){var u,c;const{namespace:s,name:r}=N.useParams(),[n,l]=I.useGet(r,s);if(l)return a.jsxs("div",{children:["Error loading volume: ",l.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:g={}}=n.jsonData||{},{kubernetesStatus:o={}}=e;return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Volume: ${g.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Robustness",value:e.robustness||"-"},{name:"Node",value:e.currentNodeID?a.jsx(i.Link,{routeName:"node",params:{name:e.currentNodeID,namespace:s},children:e.currentNodeID}):"-"},{name:"Size",value:t.size||"-"}]}),a.jsx(i.SectionBox,{title:"Status Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Actual Size",value:e.actualSize||"-"},{name:"Frontend Disabled",value:String(e.frontendDisabled)},{name:"Is Standby",value:String(e.isStandby)},{name:"Share Endpoint",value:e.shareEndpoint||"-"},{name:"Share State",value:e.shareState||"-"},{name:"Last Backup",value:e.lastBackup||"-"},{name:"Last Backup At",value:e.lastBackupAt||"-"},{name:"Expansion Required",value:String(e.expansionRequired)},{name:"Restore Required",value:String(e.restoreRequired)},{name:"Restore Initiated",value:String(e.restoreInitiated)}]})}),a.jsx(i.SectionBox,{title:"Configuration",children:a.jsx(i.NameValueTable,{rows:[{name:"Data Engine",value:t.dataEngine||"-"},{name:"Frontend",value:t.frontend||"-"},{name:"Number of Replicas",value:t.numberOfReplicas||"-"},{name:"Data Locality",value:t.dataLocality||"-"},{name:"Access Mode",value:t.accessMode||"-"},{name:"Backing Image",value:t.backingImage||"-"},{name:"Stale Replica Timeout",value:t.staleReplicaTimeout||"-"},{name:"Encrypted",value:String(t.encrypted)},{name:"Engine Image",value:t.image||"-"},{name:"From Backup",value:t.fromBackup||"-"},{name:"Disk Selector",value:((u=t.diskSelector)==null?void 0:u.join(", "))||"-"},{name:"Node Selector",value:((c=t.nodeSelector)==null?void 0:c.join(", "))||"-"},{name:"Disable Revision Counter",value:String(t.revisionCounterDisabled)},{name:"Replica Auto Balance",value:t.replicaAutoBalance||"-"},{name:"Unmap Mark SnapChain Removed",value:t.unmapMarkSnapChainRemoved||"-"},{name:"Snapshot Data Integrity",value:t.snapshotDataIntegrity||"-"},{name:"Freeze Filesystem For Snapshot",value:t.freezeFilesystemForSnapshot||"-"},{name:"Backup Target",value:t.backupTargetName||"-"},{name:"Backup Compression Method",value:t.backupCompressionMethod||"-"}]})}),a.jsx(i.SectionBox,{title:"Kubernetes Status",children:a.jsx(i.NameValueTable,{rows:[{name:"Namespace",value:o.namespace||"-"},{name:"PVC Name",value:o.pvcName||"-"},{name:"PV Name",value:o.pvName||"-"},{name:"PV Status",value:o.pvStatus||"-"},{name:"Last PVCRef At",value:o.lastPVCRefAt||"-"},{name:"Last PodRef At",value:o.lastPodRefAt||"-"}]})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}function A({specDisks:s,statusDisks:r}){const n=T.default.useMemo(()=>{if(!r)return[];const l={};for(const[t,e]of Object.entries(s||{}))l[t]=e;return Object.entries(r).map(([t,e])=>{const g=e.diskName&&l[e.diskName]||{};return{uuid:e.diskUUID||t,spec:g,status:e}})},[s,r]);return a.jsx(i.Table,{data:n,columns:[{header:"Name",accessorFn:l=>{var t;return((t=l.status)==null?void 0:t.diskName)||"-"}},{header:"UUID",accessorKey:"uuid"},{header:"Path",accessorFn:l=>{var t,e;return((t=l.status)==null?void 0:t.diskPath)||((e=l.spec)==null?void 0:e.path)||"-"}},{header:"Type",accessorFn:l=>{var t,e;return((t=l.status)==null?void 0:t.diskType)||((e=l.spec)==null?void 0:e.diskType)||"-"}},{header:"Allow Scheduling",accessorFn:l=>{var t;return String(((t=l.spec)==null?void 0:t.allowScheduling)??"-")}},{header:"Storage Available",accessorFn:l=>{var t;return((t=l.status)==null?void 0:t.storageAvailable)||"-"}},{header:"Storage Scheduled",accessorFn:l=>{var t;return((t=l.status)==null?void 0:t.storageScheduled)||"-"}},{header:"Storage Maximum",accessorFn:l=>{var t;return((t=l.status)==null?void 0:t.storageMaximum)||"-"}},{header:"Tags",accessorFn:l=>{var t,e;return((e=(t=l.spec)==null?void 0:t.tags)==null?void 0:e.join(", "))||"-"}},{header:"Status",accessorFn:l=>{var e,g;const t=(g=(e=l.status)==null?void 0:e.conditions)==null?void 0:g.find(o=>o.type==="Ready");return a.jsx(i.StatusLabel,{status:(t==null?void 0:t.status)==="True"?"success":"error",children:(t==null?void 0:t.status)||"Unknown"})}}]})}function _(){var h,v;const{namespace:s,name:r}=N.useParams(),[n,l]=w.useGet(r,s);if(l)return a.jsxs("div",{children:["Error loading node: ",l.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:g={}}=n.jsonData||{},o=e.conditions||[],u=o.find(k=>k.type==="Ready"),c=o.find(k=>k.type==="Schedulable");return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Node: ${g.name}`,extraInfo:[{name:"Ready",value:a.jsx(i.StatusLabel,{status:(u==null?void 0:u.status)==="True"?"success":"error",children:(u==null?void 0:u.status)||"Unknown"})},{name:"Schedulable",value:a.jsx(i.StatusLabel,{status:(c==null?void 0:c.status)==="True"?"success":"error",children:(c==null?void 0:c.status)||"Unknown"})},{name:"Allow Scheduling",value:String(t.allowScheduling??"-")},{name:"Region",value:e.region||"-"},{name:"Zone",value:e.zone||"-"}]}),a.jsx(i.SectionBox,{title:"Configuration",children:a.jsx(i.NameValueTable,{rows:[{name:"Tags",value:((h=t.tags)==null?void 0:h.join(", "))||"-"},{name:"Instance Manager CPU Request",value:t.instanceManagerCPURequest||"-"},{name:"Disks",value:Object.keys(t.disks||{}).join(", ")||"-"}]})}),a.jsx(i.SectionBox,{title:"Status Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Auto Evicting",value:String(e.autoEvicting)},{name:"Last Periodic Snapshot Check",value:((v=e.snapshotCheckStatus)==null?void 0:v.lastPeriodicCheckedAt)||"-"},{name:"Disk Status",value:Object.keys(e.diskStatus||{}).join(", ")||"-"}]})}),a.jsx(i.SectionBox,{title:"Disks",children:a.jsx(A,{specDisks:t.disks,statusDisks:e.diskStatus})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}function M(){const{namespace:s,name:r}=N.useParams(),[n,l]=E.useGet(r,s);if(l)return a.jsxs("div",{children:["Error loading backup: ",l.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:g={}}=n.jsonData||{};return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Backup: ${g.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Snapshot Name",value:e.snapshotName||"-"},{name:"Backup Target",value:e.backupTargetName||"-"},{name:"Volume Name",value:e.volumeName||"-"}]}),a.jsx(i.SectionBox,{title:"Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Size",value:e.size||"-"},{name:"Newly Uploaded Data",value:e.newlyUploadDataSize||"-"},{name:"Re-Uploaded Data",value:e.reUploadedDataSize||"-"},{name:"Snapshot Created At",value:e.snapshotCreatedAt||"-"},{name:"Backup Created At",value:e.backupCreatedAt||"-"},{name:"Last Synced At",value:e.lastSyncedAt||"-"},{name:"Compression Method",value:e.compressionMethod||"-"},{name:"Volume Size",value:e.volumeSize||"-"},{name:"Volume Created At",value:e.volumeCreated||"-"},{name:"Volume Backing Image",value:e.volumeBackingImageName||"-"},{name:"Progress",value:`${e.progress||0}%`},{name:"Replica Address",value:e.replicaAddress||"-"}]})}),t.labels&&a.jsx(i.SectionBox,{title:"Spec Labels",children:a.jsx(i.NameValueTable,{rows:Object.entries(t.labels).map(([o,u])=>({name:o,value:u}))})}),e.labels&&a.jsx(i.SectionBox,{title:"Status Labels",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.labels).map(([o,u])=>({name:o,value:u}))})}),e.error&&a.jsx(i.SectionBox,{title:"Error",children:a.jsx("pre",{children:e.error})}),e.messages&&a.jsx(i.SectionBox,{title:"Messages",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.messages).map(([o,u])=>({name:o,value:u}))})})]})}function P(){const{namespace:s,name:r}=N.useParams(),[n,l]=x.useGet(r,s);if(l)return a.jsxs("div",{children:["Error loading engine image: ",l.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:g={}}=n.jsonData||{};return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Engine Image: ${g.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Image",value:t.image||"-"},{name:"Ref Count",value:e.refCount??"-"},{name:"Build Date",value:e.buildDate||"-"},{name:"Incompatible",value:String(e.incompatible)}]}),a.jsx(i.SectionBox,{title:"Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Version",value:e.version||"-"},{name:"Git Commit",value:e.gitCommit||"-"},{name:"CLI API Version",value:`${e.cliAPIMinVersion||"?"} - ${e.cliAPIVersion||"?"}`},{name:"Controller API Version",value:`${e.controllerAPIMinVersion||"?"} - ${e.controllerAPIVersion||"?"}`},{name:"Data Format Version",value:`${e.dataFormatMinVersion||"?"} - ${e.dataFormatVersion||"?"}`},{name:"No Ref Since",value:e.noRefSince||"-"}]})}),e.nodeDeploymentMap&&a.jsx(i.SectionBox,{title:"Node Deployment Status",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.nodeDeploymentMap).map(([o,u])=>({name:o,value:String(u)}))})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}const p="longhorn",D="volumes",U="volume",y="nodes",F="node",B="settings",L="backups",Z="backup",G="engineimages",z="engineimage";d.registerSidebarEntry({parent:null,name:p,label:"Longhorn",icon:"mdi:cow"}),d.registerSidebarEntry({parent:p,name:D,label:"Volumes",url:"/longhorn/volumes"}),d.registerSidebarEntry({parent:p,name:y,label:"Nodes",url:"/longhorn/nodes"}),d.registerSidebarEntry({parent:p,name:B,label:"Settings",url:"/longhorn/settings"}),d.registerSidebarEntry({parent:p,name:L,label:"Backups",url:"/longhorn/backups"}),d.registerSidebarEntry({parent:p,name:G,label:"Engine Images",url:"/longhorn/engineimages"}),d.registerRoute({path:"/longhorn/volumes",sidebar:D,name:D,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Volumes",resourceClass:I,columns:["name",{id:"state",label:"State",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},{id:"robustness",label:"Robustness",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.robustness)||"-"},sort:!0},{id:"size",label:"Size",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.spec)==null?void 0:n.size)||"-"},sort:!0},{id:"node",label:"Node",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.currentNodeID)||"-"},sort:!0},"namespace","age"]})}),d.registerRoute({path:"/longhorn/volumes/:namespace/:name",sidebar:D,parent:p,name:U,exact:!0,component:V}),d.registerRoute({path:"/longhorn/nodes",sidebar:y,name:y,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Nodes",resourceClass:w,columns:["name",{id:"ready",label:"Ready",getter:s=>{var r,n,l,t;return((t=(l=(n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.conditions)==null?void 0:l.find(e=>e.type==="Ready"))==null?void 0:t.status)||"-"},sort:!0},{id:"allowScheduling",label:"Allow Scheduling",getter:s=>{var r,n;return(((n=(r=s.jsonData)==null?void 0:r.spec)==null?void 0:n.allowScheduling)??"-").toString()},sort:!0},{id:"schedulable",label:"Schedulable",getter:s=>{var r,n,l,t;return((t=(l=(n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.conditions)==null?void 0:l.find(e=>e.type==="Schedulable"))==null?void 0:t.status)||"-"},sort:!0},"age"]})}),d.registerRoute({path:"/longhorn/nodes/:namespace/:name",sidebar:y,parent:p,name:F,exact:!0,component:_});const $={"node-drain-policy":"General","detach-manually-attached-volumes-when-cordoned":"General","auto-cleanup-system-generated-snapshot":"General","auto-cleanup-recurring-job-backup-snapshot":"General","auto-delete-pod-when-volume-detached-unexpectedly":"General","auto-salvage":"General","concurrent-automatic-engine-upgrade-per-node-limit":"General","concurrent-volume-backup-restore-per-node-limit":"General","create-default-disk-labeled-nodes":"General","default-data-locality":"General","default-data-path":"General","default-engine-image":"General","default-longhorn-static-storage-class":"General","default-replica-count":"General","deleting-confirmation-flag":"General","disable-revision-counter":"General","upgrade-checker":"General","upgrade-responder-url":"General","latest-longhorn-version":"General","current-longhorn-version":"General","allow-collecting-longhorn-usage-metrics":"General","node-down-pod-deletion-policy":"General","registry-secret":"General","replica-replenishment-wait-interval":"General","system-managed-pods-image-pull-policy":"General","backing-image-cleanup-wait-interval":"General","backing-image-recovery-wait-interval":"General","default-min-number-of-backing-image-copies":"General","engine-replica-timeout":"General","support-bundle-manager-image":"General","support-bundle-failed-history-limit":"General","support-bundle-node-collection-timeout":"General","fast-replica-rebuild-enabled":"General","replica-file-sync-http-client-timeout":"General","long-grpc-timeout":"General","rwx-volume-fast-failover":"General","default-backing-image-manager-image":"General","default-instance-manager-image":"General","log-level":"General","stable-longhorn-versions":"General","crd-api-version":"General","snapshot-data-integrity":"Snapshot","snapshot-data-integrity-immediate-check-after-snapshot-creation":"Snapshot","snapshot-data-integrity-cronjob":"Snapshot","snapshot-max-count":"Snapshot","freeze-filesystem-for-snapshot":"Snapshot","orphan-auto-deletion":"Orphan","allow-recurring-job-while-volume-detached":"Backups","backup-execution-timeout":"Backups","failed-backup-ttl":"Backups","recurring-failed-jobs-history-limit":"Backups","recurring-successful-jobs-history-limit":"Backups","restore-volume-recurring-jobs":"Backups","backup-compression-method":"Backups","backup-concurrent-limit":"Backups","restore-concurrent-limit":"Backups","allow-volume-creation-with-degraded-availability":"Scheduling","disable-scheduling-on-cordoned-node":"Scheduling","replica-soft-anti-affinity":"Scheduling","replica-zone-soft-anti-affinity":"Scheduling","replica-disk-soft-anti-affinity":"Scheduling","replica-auto-balance":"Scheduling","replica-auto-balance-disk-pressure-percentage":"Scheduling","storage-minimal-available-percentage":"Scheduling","storage-over-provisioning-percentage":"Scheduling","storage-reserved-percentage-for-default-disk":"Scheduling","allow-empty-node-selector-volume":"Scheduling","allow-empty-disk-selector-volume":"Scheduling","concurrent-replica-rebuild-per-node-limit":"Danger Zone","concurrent-backing-image-replenish-per-node-limit":"Danger Zone","taint-toleration":"Danger Zone","priority-class":"Danger Zone","system-managed-components-node-selector":"Danger Zone","kubernetes-cluster-autoscaler-enabled":"Danger Zone","storage-network":"Danger Zone","storage-network-for-rwx-volume-enabled":"Danger Zone","remove-snapshots-during-filesystem-trim":"Danger Zone","guaranteed-instance-manager-cpu":"Danger Zone","disable-snapshot-purge":"Danger Zone","auto-cleanup-when-delete-backup":"Danger Zone","v1-data-engine":"Danger Zone","v2-data-engine":"Danger Zone","v2-data-engine-guaranteed-instance-manager-cpu":"Danger Zone","v2-data-engine-cpu-mask":"Danger Zone","v2-data-engine-hugepage-limit":"Danger Zone","v2-data-engine-fast-replica-rebuilding":"Danger Zone","v2-data-engine-log-flags":"Danger Zone","v2-data-engine-log-level":"Danger Zone"};function q(s){return $[s]||"Other"}const H=["General","Snapshot","Orphan","Backups","Scheduling","Danger Zone","Other"];function K(s){const{children:r,value:n,index:l,...t}=s;return a.jsx("div",{role:"tabpanel",hidden:n!==l,id:`setting-tabpanel-${l}`,"aria-labelledby":`setting-tab-${l}`,...t,children:n===l&&a.jsx(m.Box,{sx:{pt:2,pb:2},children:r})})}function J(s){return{id:`setting-tab-${s}`,"aria-controls":`setting-tabpanel-${s}`}}function R(){const[s,r]=j.useList(),[n,l]=T.default.useState(0),t=T.default.useMemo(()=>{if(!s)return null;const o={};s.forEach(c=>{const h=q(c.metadata.name);o[h]||(o[h]=[]),o[h].push(c),o[h].sort((v,k)=>v.metadata.name.localeCompare(k.metadata.name))});const u={};return H.forEach(c=>{o[c]&&(u[c]=o[c])}),Object.keys(o).forEach(c=>{u[c]||(u[c]=o[c])}),u},[s]),e=(o,u)=>{l(u)};if(r)return a.jsxs(m.Typography,{color:"error",children:["Error loading settings: ",r.message]});if(!t)return a.jsx(i.Loader,{title:"Loading Longhorn Settings..."});const g=Object.keys(t);return a.jsxs(m.Box,{sx:{width:"100%"},children:[a.jsx(m.Box,{sx:{borderBottom:1,borderColor:"divider"},children:a.jsx(m.Tabs,{value:n,onChange:e,"aria-label":"Longhorn settings categories",variant:"scrollable",scrollButtons:"auto",children:g.map((o,u)=>a.jsx(m.Tab,{label:`${o} (${t[o].length})`,...J(u)},o))})}),g.map((o,u)=>a.jsx(K,{value:n,index:u,children:a.jsx(i.NameValueTable,{rows:t[o].map(c=>{var h,v;return{name:c.metadata.name,value:a.jsxs(m.Box,{sx:{display:"flex",flexDirection:"row",alignItems:"baseline",width:"100%"},children:[a.jsx(m.Typography,{component:"span",variant:"body2",sx:{wordBreak:"break-word",flexGrow:1,mr:1},children:(c.jsonData.value??"-").toString()}),a.jsx(m.Box,{component:"span",sx:{flexShrink:0,ml:1},children:a.jsx(i.StatusLabel,{status:(h=c.jsonData.status)!=null&&h.applied?"success":"error",children:(v=c.jsonData.status)!=null&&v.applied?"applied":"not applied"})})]})}})})},o))]})}d.registerRoute({path:"/longhorn/settings",sidebar:B,name:B,exact:!0,component:R}),d.registerRoute({path:"/longhorn/backups",sidebar:L,name:L,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Backups",resourceClass:E,columns:["name",{id:"snapshotName",label:"Snapshot Name",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.snapshotName)||"-"},sort:!0},{id:"snapshotSize",label:"Snapshot Size",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.size)||"-"},sort:!0},{id:"backupTarget",label:"Backup Target",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.backupTargetName)||"-"},sort:!0},{id:"state",label:"State",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},"namespace","age"]})}),d.registerRoute({path:"/longhorn/backups/:namespace/:name",sidebar:L,parent:p,name:Z,exact:!0,component:M}),d.registerRoute({path:"/longhorn/engineimages",sidebar:G,name:G,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Engine Images",resourceClass:x,columns:["name",{id:"state",label:"State",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},{id:"image",label:"Image",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.spec)==null?void 0:n.image)||"-"},sort:!0},{id:"refCount",label:"Ref Count",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.refCount)??"-"},sort:!0},{id:"buildDate",label:"Build Date",getter:s=>{var r,n;return((n=(r=s.jsonData)==null?void 0:r.status)==null?void 0:n.buildDate)||"-"},sort:!0},"age"]})}),d.registerRoute({path:"/longhorn/engineimages/:namespace/:name",sidebar:G,parent:p,name:z,exact:!0,component:P}),console.log("Longhorn Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
