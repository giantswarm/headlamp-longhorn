(function(a,u){typeof exports=="object"&&typeof module<"u"?u(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("react-router-dom"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material","@kinvolk/headlamp-plugin/lib/K8s/crd","react-router-dom","react"],u):(a=typeof globalThis<"u"?globalThis:a||self,u(a.pluginLib.ReactJSX,a.pluginLib,a.pluginLib.CommonComponents,a.pluginLib.MuiMaterial,a.pluginLib.Crd,a.pluginLib.ReactRouter,a.pluginLib.React))})(this,function(a,u,i,p,m,b,x){"use strict";const G=(l=>l&&typeof l=="object"&&"default"in l?l:{default:l})(x),{makeKubeObject:X}=u.K8s.cluster,v="longhorn.io",S="v1beta2",I=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Volume",pluralName:"volumes"}),T=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Node",pluralName:"nodes"}),j=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Setting",pluralName:"settings"}),B=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"Backup",pluralName:"backups"}),w=m.makeCustomResourceClass({apiInfo:[{group:v,version:S}],isNamespaced:!0,singularName:"EngineImage",pluralName:"engineimages"});function V(){var d,h;const{namespace:l,name:r}=b.useParams(),[n,s]=I.useGet(r,l);if(s)return a.jsxs("div",{children:["Error loading volume: ",s.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:c={}}=n.jsonData||{},{kubernetesStatus:o={}}=e;return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Volume: ${c.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Robustness",value:e.robustness||"-"},{name:"Node",value:e.currentNodeID?a.jsx(i.Link,{routeName:"node",params:{name:e.currentNodeID,namespace:l},children:e.currentNodeID}):"-"},{name:"Size",value:t.size||"-"}]}),a.jsx(i.SectionBox,{title:"Status Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Actual Size",value:e.actualSize||"-"},{name:"Frontend Disabled",value:String(e.frontendDisabled)},{name:"Is Standby",value:String(e.isStandby)},{name:"Share Endpoint",value:e.shareEndpoint||"-"},{name:"Share State",value:e.shareState||"-"},{name:"Last Backup",value:e.lastBackup||"-"},{name:"Last Backup At",value:e.lastBackupAt||"-"},{name:"Expansion Required",value:String(e.expansionRequired)},{name:"Restore Required",value:String(e.restoreRequired)},{name:"Restore Initiated",value:String(e.restoreInitiated)}]})}),a.jsx(i.SectionBox,{title:"Configuration",children:a.jsx(i.NameValueTable,{rows:[{name:"Data Engine",value:t.dataEngine||"-"},{name:"Frontend",value:t.frontend||"-"},{name:"Number of Replicas",value:t.numberOfReplicas||"-"},{name:"Data Locality",value:t.dataLocality||"-"},{name:"Access Mode",value:t.accessMode||"-"},{name:"Backing Image",value:t.backingImage||"-"},{name:"Stale Replica Timeout",value:t.staleReplicaTimeout||"-"},{name:"Encrypted",value:String(t.encrypted)},{name:"Engine Image",value:t.image||"-"},{name:"From Backup",value:t.fromBackup||"-"},{name:"Disk Selector",value:((d=t.diskSelector)==null?void 0:d.join(", "))||"-"},{name:"Node Selector",value:((h=t.nodeSelector)==null?void 0:h.join(", "))||"-"},{name:"Disable Revision Counter",value:String(t.revisionCounterDisabled)},{name:"Replica Auto Balance",value:t.replicaAutoBalance||"-"},{name:"Unmap Mark SnapChain Removed",value:t.unmapMarkSnapChainRemoved||"-"},{name:"Snapshot Data Integrity",value:t.snapshotDataIntegrity||"-"},{name:"Freeze Filesystem For Snapshot",value:t.freezeFilesystemForSnapshot||"-"},{name:"Backup Target",value:t.backupTargetName||"-"},{name:"Backup Compression Method",value:t.backupCompressionMethod||"-"}]})}),a.jsx(i.SectionBox,{title:"Kubernetes Status",children:a.jsx(i.NameValueTable,{rows:[{name:"Namespace",value:o.namespace||"-"},{name:"PVC Name",value:o.pvcName||"-"},{name:"PV Name",value:o.pvName||"-"},{name:"PV Status",value:o.pvStatus||"-"},{name:"Last PVCRef At",value:o.lastPVCRefAt||"-"},{name:"Last PodRef At",value:o.lastPodRefAt||"-"}]})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}function A({specDisks:l,statusDisks:r}){const n=G.default.useMemo(()=>{if(!r)return[];const s={};for(const[t,e]of Object.entries(l||{}))s[t]=e;return Object.entries(r).map(([t,e])=>{const c=e.diskName&&s[e.diskName]||{};return{uuid:e.diskUUID||t,spec:c,status:e}})},[l,r]);return a.jsx(i.Table,{data:n,columns:[{header:"Name",accessorFn:s=>{var t;return((t=s.status)==null?void 0:t.diskName)||"-"}},{header:"UUID",accessorKey:"uuid"},{header:"Path",accessorFn:s=>{var t,e;return((t=s.status)==null?void 0:t.diskPath)||((e=s.spec)==null?void 0:e.path)||"-"}},{header:"Type",accessorFn:s=>{var t,e;return((t=s.status)==null?void 0:t.diskType)||((e=s.spec)==null?void 0:e.diskType)||"-"}},{header:"Allow Scheduling",accessorFn:s=>{var t;return String(((t=s.spec)==null?void 0:t.allowScheduling)??"-")}},{header:"Storage Available",accessorFn:s=>{var t;return((t=s.status)==null?void 0:t.storageAvailable)||"-"}},{header:"Storage Scheduled",accessorFn:s=>{var t;return((t=s.status)==null?void 0:t.storageScheduled)||"-"}},{header:"Storage Maximum",accessorFn:s=>{var t;return((t=s.status)==null?void 0:t.storageMaximum)||"-"}},{header:"Tags",accessorFn:s=>{var t,e;return((e=(t=s.spec)==null?void 0:t.tags)==null?void 0:e.join(", "))||"-"}},{header:"Status",accessorFn:s=>{var e,c;const t=(c=(e=s.status)==null?void 0:e.conditions)==null?void 0:c.find(o=>o.type==="Ready");return a.jsx(i.StatusLabel,{status:(t==null?void 0:t.status)==="True"?"success":"error",children:(t==null?void 0:t.status)||"Unknown"})}}]})}function _(){var E,O;const{namespace:l,name:r}=b.useParams(),[n,s]=T.useGet(r,l);if(s)return a.jsxs("div",{children:["Error loading node: ",s.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:c={}}=n.jsonData||{},o=e.conditions||[],d=o.find(L=>L.type==="Ready"),h=o.find(L=>L.type==="Schedulable");return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Node: ${c.name}`,extraInfo:[{name:"Ready",value:a.jsx(i.StatusLabel,{status:(d==null?void 0:d.status)==="True"?"success":"error",children:(d==null?void 0:d.status)||"Unknown"})},{name:"Schedulable",value:a.jsx(i.StatusLabel,{status:(h==null?void 0:h.status)==="True"?"success":"error",children:(h==null?void 0:h.status)||"Unknown"})},{name:"Allow Scheduling",value:String(t.allowScheduling??"-")},{name:"Region",value:e.region||"-"},{name:"Zone",value:e.zone||"-"}]}),a.jsx(i.SectionBox,{title:"Configuration",children:a.jsx(i.NameValueTable,{rows:[{name:"Tags",value:((E=t.tags)==null?void 0:E.join(", "))||"-"},{name:"Instance Manager CPU Request",value:t.instanceManagerCPURequest||"-"},{name:"Disks",value:Object.keys(t.disks||{}).join(", ")||"-"}]})}),a.jsx(i.SectionBox,{title:"Status Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Auto Evicting",value:String(e.autoEvicting)},{name:"Last Periodic Snapshot Check",value:((O=e.snapshotCheckStatus)==null?void 0:O.lastPeriodicCheckedAt)||"-"},{name:"Disk Status",value:Object.keys(e.diskStatus||{}).join(", ")||"-"}]})}),a.jsx(i.SectionBox,{title:"Disks",children:a.jsx(A,{specDisks:t.disks,statusDisks:e.diskStatus})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}function M(){const{namespace:l,name:r}=b.useParams(),[n,s]=B.useGet(r,l);if(s)return a.jsxs("div",{children:["Error loading backup: ",s.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:c={}}=n.jsonData||{};return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Backup: ${c.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Snapshot Name",value:e.snapshotName||"-"},{name:"Backup Target",value:e.backupTargetName||"-"},{name:"Volume Name",value:e.volumeName||"-"}]}),a.jsx(i.SectionBox,{title:"Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Size",value:e.size||"-"},{name:"Newly Uploaded Data",value:e.newlyUploadDataSize||"-"},{name:"Re-Uploaded Data",value:e.reUploadedDataSize||"-"},{name:"Snapshot Created At",value:e.snapshotCreatedAt||"-"},{name:"Backup Created At",value:e.backupCreatedAt||"-"},{name:"Last Synced At",value:e.lastSyncedAt||"-"},{name:"Compression Method",value:e.compressionMethod||"-"},{name:"Volume Size",value:e.volumeSize||"-"},{name:"Volume Created At",value:e.volumeCreated||"-"},{name:"Volume Backing Image",value:e.volumeBackingImageName||"-"},{name:"Progress",value:`${e.progress||0}%`},{name:"Replica Address",value:e.replicaAddress||"-"}]})}),t.labels&&a.jsx(i.SectionBox,{title:"Spec Labels",children:a.jsx(i.NameValueTable,{rows:Object.entries(t.labels).map(([o,d])=>({name:o,value:d}))})}),e.labels&&a.jsx(i.SectionBox,{title:"Status Labels",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.labels).map(([o,d])=>({name:o,value:d}))})}),e.error&&a.jsx(i.SectionBox,{title:"Error",children:a.jsx("pre",{children:e.error})}),e.messages&&a.jsx(i.SectionBox,{title:"Messages",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.messages).map(([o,d])=>({name:o,value:d}))})})]})}function U(){const{namespace:l,name:r}=b.useParams(),[n,s]=w.useGet(r,l);if(s)return a.jsxs("div",{children:["Error loading engine image: ",s.message]});if(!n)return a.jsx("div",{children:"Loading..."});const{spec:t={},status:e={},metadata:c={}}=n.jsonData||{};return a.jsxs(a.Fragment,{children:[a.jsx(i.MainInfoSection,{resource:n,title:`Engine Image: ${c.name}`,extraInfo:[{name:"State",value:e.state||"-"},{name:"Image",value:t.image||"-"},{name:"Ref Count",value:e.refCount??"-"},{name:"Build Date",value:e.buildDate||"-"},{name:"Incompatible",value:String(e.incompatible)}]}),a.jsx(i.SectionBox,{title:"Details",children:a.jsx(i.NameValueTable,{rows:[{name:"Version",value:e.version||"-"},{name:"Git Commit",value:e.gitCommit||"-"},{name:"CLI API Version",value:`${e.cliAPIMinVersion||"?"} - ${e.cliAPIVersion||"?"}`},{name:"Controller API Version",value:`${e.controllerAPIMinVersion||"?"} - ${e.controllerAPIVersion||"?"}`},{name:"Data Format Version",value:`${e.dataFormatMinVersion||"?"} - ${e.dataFormatVersion||"?"}`},{name:"No Ref Since",value:e.noRefSince||"-"}]})}),e.nodeDeploymentMap&&a.jsx(i.SectionBox,{title:"Node Deployment Status",children:a.jsx(i.NameValueTable,{rows:Object.entries(e.nodeDeploymentMap).map(([o,d])=>({name:o,value:String(d)}))})}),a.jsx(i.SectionBox,{title:"Conditions",children:a.jsx(i.ConditionsTable,{resource:n.jsonData})})]})}const g="longhorn",f="volumes",P="volume",k="nodes",F="node",y="settings",D="backups",Z="backup",N="engineimages",z="engineimage";u.registerSidebarEntry({parent:null,name:g,label:"Longhorn",icon:"mdi:cow"}),u.registerSidebarEntry({parent:g,name:f,label:"Volumes",url:"/longhorn/volumes"}),u.registerSidebarEntry({parent:g,name:k,label:"Nodes",url:"/longhorn/nodes"}),u.registerSidebarEntry({parent:g,name:y,label:"Settings",url:"/longhorn/settings"}),u.registerSidebarEntry({parent:g,name:D,label:"Backups",url:"/longhorn/backups"}),u.registerSidebarEntry({parent:g,name:N,label:"Engine Images",url:"/longhorn/engineimages"}),u.registerRoute({path:"/longhorn/volumes",sidebar:f,name:f,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Volumes",resourceClass:I,columns:["name",{id:"state",label:"State",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},{id:"robustness",label:"Robustness",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.robustness)||"-"},sort:!0},{id:"size",label:"Size",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.spec)==null?void 0:n.size)||"-"},sort:!0},{id:"node",label:"Node",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.currentNodeID)||"-"},sort:!0},"namespace","age"]})}),u.registerRoute({path:"/longhorn/volumes/:namespace/:name",sidebar:f,parent:g,name:P,exact:!0,component:V}),u.registerRoute({path:"/longhorn/nodes",sidebar:k,name:k,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Nodes",resourceClass:T,columns:["name",{id:"ready",label:"Ready",getter:l=>{var r,n,s,t;return((t=(s=(n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.conditions)==null?void 0:s.find(e=>e.type==="Ready"))==null?void 0:t.status)||"-"},sort:!0},{id:"allowScheduling",label:"Allow Scheduling",getter:l=>{var r,n;return(((n=(r=l.jsonData)==null?void 0:r.spec)==null?void 0:n.allowScheduling)??"-").toString()},sort:!0},{id:"schedulable",label:"Schedulable",getter:l=>{var r,n,s,t;return((t=(s=(n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.conditions)==null?void 0:s.find(e=>e.type==="Schedulable"))==null?void 0:t.status)||"-"},sort:!0},"age"]})}),u.registerRoute({path:"/longhorn/nodes/:namespace/:name",sidebar:k,parent:g,name:F,exact:!0,component:_});const q={"node-drain-policy":"General","detach-manually-attached-volumes-when-cordoned":"General","auto-cleanup-system-generated-snapshot":"General","auto-cleanup-recurring-job-backup-snapshot":"General","auto-delete-pod-when-volume-detached-unexpectedly":"General","auto-salvage":"General","concurrent-automatic-engine-upgrade-per-node-limit":"General","concurrent-volume-backup-restore-per-node-limit":"General","create-default-disk-labeled-nodes":"General","default-data-locality":"General","default-data-path":"General","default-engine-image":"General","default-longhorn-static-storage-class":"General","default-replica-count":"General","deleting-confirmation-flag":"General","disable-revision-counter":"General","upgrade-checker":"General","upgrade-responder-url":"General","latest-longhorn-version":"General","current-longhorn-version":"General","allow-collecting-longhorn-usage-metrics":"General","node-down-pod-deletion-policy":"General","registry-secret":"General","replica-replenishment-wait-interval":"General","system-managed-pods-image-pull-policy":"General","backing-image-cleanup-wait-interval":"General","backing-image-recovery-wait-interval":"General","default-min-number-of-backing-image-copies":"General","engine-replica-timeout":"General","support-bundle-manager-image":"General","support-bundle-failed-history-limit":"General","support-bundle-node-collection-timeout":"General","fast-replica-rebuild-enabled":"General","replica-file-sync-http-client-timeout":"General","long-grpc-timeout":"General","rwx-volume-fast-failover":"General","default-backing-image-manager-image":"General","default-instance-manager-image":"General","log-level":"General","stable-longhorn-versions":"General","crd-api-version":"General","snapshot-data-integrity":"Snapshot","snapshot-data-integrity-immediate-check-after-snapshot-creation":"Snapshot","snapshot-data-integrity-cronjob":"Snapshot","snapshot-max-count":"Snapshot","freeze-filesystem-for-snapshot":"Snapshot","orphan-auto-deletion":"Orphan","allow-recurring-job-while-volume-detached":"Backups","backup-execution-timeout":"Backups","failed-backup-ttl":"Backups","recurring-failed-jobs-history-limit":"Backups","recurring-successful-jobs-history-limit":"Backups","restore-volume-recurring-jobs":"Backups","backup-compression-method":"Backups","backup-concurrent-limit":"Backups","restore-concurrent-limit":"Backups","allow-volume-creation-with-degraded-availability":"Scheduling","disable-scheduling-on-cordoned-node":"Scheduling","replica-soft-anti-affinity":"Scheduling","replica-zone-soft-anti-affinity":"Scheduling","replica-disk-soft-anti-affinity":"Scheduling","replica-auto-balance":"Scheduling","replica-auto-balance-disk-pressure-percentage":"Scheduling","storage-minimal-available-percentage":"Scheduling","storage-over-provisioning-percentage":"Scheduling","storage-reserved-percentage-for-default-disk":"Scheduling","allow-empty-node-selector-volume":"Scheduling","allow-empty-disk-selector-volume":"Scheduling","concurrent-replica-rebuild-per-node-limit":"Danger Zone","concurrent-backing-image-replenish-per-node-limit":"Danger Zone","taint-toleration":"Danger Zone","priority-class":"Danger Zone","system-managed-components-node-selector":"Danger Zone","kubernetes-cluster-autoscaler-enabled":"Danger Zone","storage-network":"Danger Zone","storage-network-for-rwx-volume-enabled":"Danger Zone","remove-snapshots-during-filesystem-trim":"Danger Zone","guaranteed-instance-manager-cpu":"Danger Zone","disable-snapshot-purge":"Danger Zone","auto-cleanup-when-delete-backup":"Danger Zone","v1-data-engine":"Danger Zone","v2-data-engine":"Danger Zone","v2-data-engine-guaranteed-instance-manager-cpu":"Danger Zone","v2-data-engine-cpu-mask":"Danger Zone","v2-data-engine-hugepage-limit":"Danger Zone","v2-data-engine-fast-replica-rebuilding":"Danger Zone","v2-data-engine-log-flags":"Danger Zone","v2-data-engine-log-level":"Danger Zone"};function $(l){return q[l]||"Other"}const H=["General","Snapshot","Orphan","Backups","Scheduling","Danger Zone","Other"];function K(){const[l,r]=j.useList(),n=G.default.useMemo(()=>{if(!l)return null;const s={};l.forEach(e=>{const c=$(e.metadata.name);s[c]||(s[c]=[]),s[c].push(e),s[c].sort((o,d)=>o.metadata.name.localeCompare(d.metadata.name))});const t={};return H.forEach(e=>{s[e]&&(t[e]=s[e])}),Object.keys(s).forEach(e=>{t[e]||(t[e]=s[e])}),t},[l]);return r?a.jsxs(p.Typography,{color:"error",children:["Error loading settings: ",r.message]}):n?a.jsx(p.Box,{children:Object.entries(n).map(([s,t])=>a.jsxs(p.Accordion,{defaultExpanded:s==="General",children:[a.jsx(p.AccordionSummary,{"aria-controls":`${s}-content`,id:`${s}-header`,children:a.jsxs(p.Typography,{variant:"h6",children:[s," (",t.length,")"]})}),a.jsx(p.AccordionDetails,{sx:{paddingX:1,paddingY:1},children:a.jsx(i.NameValueTable,{rows:t.map(e=>{var c,o;return{name:e.metadata.name,value:a.jsxs(p.Box,{sx:{display:"flex",flexDirection:"row",alignItems:"baseline",width:"100%"},children:[a.jsx(p.Typography,{component:"span",variant:"body2",sx:{wordBreak:"break-word",flexGrow:1,mr:1},children:(e.jsonData.value??"-").toString()}),a.jsx(p.Box,{component:"span",sx:{flexShrink:0,ml:1},children:a.jsx(i.StatusLabel,{status:(c=e.jsonData.status)!=null&&c.applied?"success":"error",children:(((o=e.jsonData.status)==null?void 0:o.applied)??!1).toString()})})]})}})})})]},s))}):a.jsx(i.Loader,{title:"Loading Longhorn Settings..."})}u.registerRoute({path:"/longhorn/settings",sidebar:y,name:y,exact:!0,component:K}),u.registerRoute({path:"/longhorn/backups",sidebar:D,name:D,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Backups",resourceClass:B,columns:["name",{id:"snapshotName",label:"Snapshot Name",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.snapshotName)||"-"},sort:!0},{id:"snapshotSize",label:"Snapshot Size",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.size)||"-"},sort:!0},{id:"backupTarget",label:"Backup Target",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.backupTargetName)||"-"},sort:!0},{id:"state",label:"State",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},"namespace","age"]})}),u.registerRoute({path:"/longhorn/backups/:namespace/:name",sidebar:D,parent:g,name:Z,exact:!0,component:M}),u.registerRoute({path:"/longhorn/engineimages",sidebar:N,name:N,exact:!0,component:()=>a.jsx(i.ResourceListView,{title:"Longhorn Engine Images",resourceClass:w,columns:["name",{id:"state",label:"State",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.state)||"-"},sort:!0},{id:"image",label:"Image",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.spec)==null?void 0:n.image)||"-"},sort:!0},{id:"refCount",label:"Ref Count",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.refCount)??"-"},sort:!0},{id:"buildDate",label:"Build Date",getter:l=>{var r,n;return((n=(r=l.jsonData)==null?void 0:r.status)==null?void 0:n.buildDate)||"-"},sort:!0},"age"]})}),u.registerRoute({path:"/longhorn/engineimages/:namespace/:name",sidebar:N,parent:g,name:z,exact:!0,component:U}),console.log("Longhorn Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
